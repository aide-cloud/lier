"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prod = exports.dev = void 0;
// Custom webpack config
const path_1 = __importDefault(require("path"));
const webpack_merge_1 = __importDefault(require("webpack-merge"));
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
const progress_webpack_plugin_1 = __importDefault(require("progress-webpack-plugin"));
const css_minimizer_webpack_plugin_1 = __importDefault(require("css-minimizer-webpack-plugin"));
const webpack_plugin_1 = __importDefault(require("@arco-design/webpack-plugin"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const plugin_1 = __importDefault(require("../plugin"));
const babel_config_1 = __importDefault(require("./babel.config"));
const getMainConfig_1 = __importDefault(require("../utils/getMainConfig"));
const getConfigProcessor_1 = __importDefault(require("../utils/getConfigProcessor"));
const removeMarkdownDemoPart_1 = __importDefault(require("../utils/removeMarkdownDemoPart"));
const generateEntryFiles_1 = require("../utils/generateEntryFiles");
const REGEXP_CSS = /\.css$/;
const REGEXP_LESS = /\.less$/;
const REGEXP_LESS_MODULE = /\.module\.less$/;
const DEV_DIRECTORY_NAME = 'dist-dev';
const { build: buildConfig, site: siteConfig } = (0, getMainConfig_1.default)();
function getEntryConfig() {
    const entry = {};
    siteConfig.languages.forEach((language) => {
        entry[language] = (0, generateEntryFiles_1.getPathEntryByLanguage)(language);
    });
    return entry;
}
function getModuleRuleForCss() {
    return [
        {
            loader: require.resolve('style-loader'),
        },
        {
            loader: require.resolve('css-loader'),
        },
    ];
}
function getModuleRuleForLess({ cssModule }) {
    return [
        {
            loader: require.resolve('style-loader'),
        },
        {
            loader: require.resolve('css-loader'),
            options: cssModule
                ? {
                    modules: {
                        localIdentName: '[local]-[hash:10]',
                    },
                }
                : {},
        },
        {
            loader: require.resolve('less-loader'),
            options: {
                lessOptions: {
                    javascriptEnabled: true,
                },
            },
        },
    ];
}
/**
 * Generate webpack config needed by both production and development mode.
 * Config extension function will be executed twice, ensuring that BaseConfig is a different reference object.
 */
function generateBaseConfig() {
    return {
        output: {
            path: path_1.default.resolve('dist'),
            filename: `${generateEntryFiles_1.LIBRARY_MODULE_NAME}.[name].js`,
            library: {
                name: generateEntryFiles_1.LIBRARY_MODULE_NAME,
                type: 'umd',
            },
        },
        module: {
            rules: [
                {
                    test: /\.(js|jsx|ts|tsx)$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: require.resolve('babel-loader'),
                            options: babel_config_1.default,
                        },
                    ],
                },
                {
                    test: /\.md$/,
                    use: [
                        {
                            loader: require.resolve('babel-loader'),
                            options: babel_config_1.default,
                        },
                        {
                            loader: require.resolve('arco-markdown-loader'),
                            options: {
                                demoDir: 'demo',
                                preprocess: removeMarkdownDemoPart_1.default,
                            },
                        },
                    ],
                },
                {
                    test: /\.svg$/,
                    use: [require.resolve('@svgr/webpack')],
                },
                {
                    test: /\.(png|jpg|gif|ttf|eot|woff|woff2)$/,
                    type: 'asset/resource',
                },
                {
                    test: /\.txt$/,
                    type: 'asset/source',
                },
            ],
        },
        plugins: [
            new plugin_1.default({
                globs: buildConfig.globs,
            }),
            new progress_webpack_plugin_1.default(true),
        ],
        resolve: {
            extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],
            alias: {},
        },
        resolveLoader: {
            modules: [
                'node_modules',
                path_1.default.resolve(__dirname, '../../node_modules'),
                path_1.default.resolve(__dirname, '../../../'),
            ],
        },
        externals: [
            {
                react: {
                    root: 'React',
                    commonjs2: 'react',
                    commonjs: 'react',
                    amd: 'react',
                },
                'react-dom': {
                    root: 'ReactDOM',
                    commonjs2: 'react-dom',
                    commonjs: 'react-dom',
                    amd: 'react-dom',
                },
            },
            arco_cli_dev_utils_1.webpackExternalForArco,
        ],
    };
}
/**
 * Generate webpack config based on user's site config
 */
function generateCustomConfig() {
    const plugins = [];
    if (siteConfig.arcoIconBox) {
        plugins.push(new webpack_plugin_1.default({
            iconBox: siteConfig.arcoIconBox,
            include: [generateEntryFiles_1.ENTRY_DIR_NAME],
        }));
    }
    return {
        plugins,
    };
}
const config = {
    dev: (0, webpack_merge_1.default)([
        generateBaseConfig(),
        {
            mode: 'development',
            output: {
                publicPath: '/',
            },
            module: {
                rules: [
                    {
                        test: REGEXP_CSS,
                        use: getModuleRuleForCss(),
                    },
                    {
                        test: REGEXP_LESS,
                        exclude: REGEXP_LESS_MODULE,
                        use: getModuleRuleForLess({ cssModule: false }),
                    },
                    {
                        test: REGEXP_LESS_MODULE,
                        use: getModuleRuleForLess({ cssModule: true }),
                    },
                ],
            },
            plugins: [],
            devServer: {
                open: true,
                historyApiFallback: true,
                port: 9000,
                static: {
                    directory: path_1.default.resolve(DEV_DIRECTORY_NAME),
                },
                client: {
                    logging: 'error',
                    overlay: false,
                },
            },
        },
        generateCustomConfig(),
    ]),
    prod: (0, webpack_merge_1.default)([
        generateBaseConfig(),
        {
            mode: 'production',
            entry: getEntryConfig(),
            module: {
                rules: [
                    {
                        test: REGEXP_CSS,
                        use: getModuleRuleForCss(),
                    },
                    {
                        test: REGEXP_LESS,
                        exclude: REGEXP_LESS_MODULE,
                        use: getModuleRuleForLess({ cssModule: false }),
                    },
                    {
                        test: REGEXP_LESS_MODULE,
                        use: getModuleRuleForLess({ cssModule: true }),
                    },
                ],
            },
            optimization: {
                minimizer: [new terser_webpack_plugin_1.default(), new css_minimizer_webpack_plugin_1.default()],
            },
        },
        generateCustomConfig(),
    ]),
};
const processor = (0, getConfigProcessor_1.default)('webpack');
if (processor) {
    config.dev = processor(config.dev, 'dev') || config.dev;
    config.prod = processor(config.prod, 'prod') || config.prod;
}
exports.dev = config.dev;
exports.prod = config.prod;
