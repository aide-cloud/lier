"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const parse_es_import_1 = __importDefault(require("parse-es-import"));
/**
 * Parse exported modules of file
 */
function parseModuleExport({ statsModules, context, validPaths, }) {
    const result = {};
    for (const { name } of statsModules) {
        const pathCurrent = path_1.default.resolve(context, name);
        const dirPathCurrent = path_1.default.dirname(pathCurrent);
        if (validPaths.indexOf(pathCurrent) === -1) {
            continue;
        }
        const moduleInfoList = [];
        const { imports, exports } = (0, parse_es_import_1.default)(fs_1.default.readFileSync(pathCurrent, 'utf8'));
        const moduleImported = imports
            .map(({ starImport, defaultImport, moduleName: importModuleName }) => {
            const [pathImport] = glob_1.default.sync(path_1.default.resolve(dirPathCurrent, `${importModuleName}?(.jsx|.js|.ts|.tsx)`));
            return {
                name: starImport || defaultImport,
                path: pathImport,
            };
        })
            .filter((module) => module.path);
        for (const { type, moduleName, value, identifierList, identifierTree } of exports) {
            switch (type) {
                case 'ExportSpecifier': {
                    let pathImport = path_1.default.resolve(dirPathCurrent, value);
                    if (fs_1.default.existsSync(pathImport) && fs_1.default.lstatSync(pathImport).isDirectory()) {
                        pathImport = `${pathImport}/index`;
                    }
                    pathImport = glob_1.default.sync(`${pathImport}?(.jsx|.js|.ts|.tsx)`).pop();
                    if (pathImport) {
                        let rawCode = '';
                        try {
                            rawCode = fs_1.default.readFileSync(pathImport, 'utf8');
                        }
                        catch (e) {
                            rawCode = 'Failed to get demo code.';
                        }
                        moduleInfoList.push({
                            name: moduleName,
                            value,
                            dependencies: [
                                {
                                    path: pathImport,
                                    rawCode,
                                },
                            ],
                        });
                    }
                    break;
                }
                case 'FunctionDeclaration':
                case 'VariableDeclaration': {
                    // Coupled with the content of the file, the content that needs to be parsed is as follows
                    // import * as _Component from '../../Component/demo/index.js';
                    // import * as _ComponentDoc from '../../Component/README.md';
                    // export const Component = { ..._Component, SITE_DOC: _ComponentDoc };
                    const dependencies = [];
                    if (identifierList.length) {
                        identifierList.forEach((identifier) => {
                            const importFrom = moduleImported.find(({ name }) => name === identifier);
                            if (importFrom) {
                                let key = identifierList.length > 1 ? identifier : null;
                                Object.entries(identifierTree || {}).forEach(([_key, value]) => {
                                    if (value === identifier) {
                                        key = _key;
                                    }
                                });
                                dependencies.push({
                                    key,
                                    path: importFrom.path,
                                    rawCode: fs_1.default.readFileSync(importFrom.path, 'utf8'),
                                });
                            }
                        });
                    }
                    moduleInfoList.push({
                        name: moduleName,
                        value,
                        dependencies,
                    });
                    break;
                }
                default:
                    break;
            }
        }
        result[pathCurrent] = moduleInfoList;
    }
    return result;
}
exports.default = parseModuleExport;
