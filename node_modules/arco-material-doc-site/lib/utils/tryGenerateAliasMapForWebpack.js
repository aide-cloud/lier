"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const locale_1 = __importDefault(require("../locale"));
const getMainConfig_1 = __importDefault(require("./getMainConfig"));
// Ensure that the result information is only printed once
let needPrintResult = true;
function tryGenerateAliasMapForWebpack() {
    const result = {};
    const { build: { globs }, } = (0, getMainConfig_1.default)();
    let packagePathList = [];
    const extendPackagePathList = ({ component }) => {
        if (component === null || component === void 0 ? void 0 : component.base) {
            packagePathList = packagePathList.concat(glob_1.default.sync(component.base));
        }
    };
    if (Array.isArray(globs)) {
        globs.forEach((item) => extendPackagePathList(item));
    }
    else if (typeof globs === 'object' && !globs.component && !globs.doc) {
        Object.entries(globs).forEach(([_, item]) => extendPackagePathList(item));
    }
    else {
        extendPackagePathList(globs);
    }
    packagePathList.forEach((_path) => {
        const pathPackageJson = path_1.default.resolve(_path, 'package.json');
        const pathSrc = path_1.default.resolve(_path, 'src');
        if (fs_extra_1.default.existsSync(pathPackageJson) && fs_extra_1.default.existsSync(pathSrc)) {
            const { name: packageName } = fs_extra_1.default.readJsonSync(pathPackageJson);
            result[`${packageName}$`] = pathSrc;
        }
    });
    if (needPrintResult && Object.keys(result).length) {
        arco_cli_dev_utils_1.print.success('[arco-doc-site]', locale_1.default.TIP_WEBPACK_ALIAS_COLLECT_RESULT);
        arco_cli_dev_utils_1.print.info(JSON.stringify(result, null, 2));
        needPrintResult = false;
    }
    return result;
}
exports.default = tryGenerateAliasMapForWebpack;
