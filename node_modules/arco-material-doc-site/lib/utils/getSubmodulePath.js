"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const BASE_SUBMODULE_DIR_NAME = 'submodule';
function getSubmodulePath(buildConfig, languages) {
    const globs = buildConfig.globs;
    const pathInfoMap = {};
    const globsToWatch = [];
    const extendSubmoduleInfo = (submoduleKey, glob) => {
        const info = {};
        Object.entries(glob).forEach(([key, item]) => {
            let entryFilePath = null;
            // both doc and component may have different entries according to language
            // component entry will import API doc like README.[language].md
            if (languages.length > 1 && ['doc', 'component'].indexOf(key) > -1) {
                entryFilePath = {};
                languages.forEach((lang) => (entryFilePath[lang] = `./${submoduleKey}/${key}.${lang}.js`));
            }
            else {
                entryFilePath = `./${submoduleKey}/${key}.js`;
            }
            info[key] = {
                glob: item,
                path: entryFilePath,
            };
            if (typeof item === 'string') {
                globsToWatch.push(path_1.default.resolve(item));
            }
            else if (Object.prototype.toString.call(item) === '[object Object]') {
                Object.entries(item).forEach(([globKey, globStr]) => {
                    if (globKey !== 'base') {
                        const globBase = item.base;
                        globsToWatch.push(globBase ? path_1.default.resolve(globBase, globStr) : globStr);
                    }
                });
            }
        });
        pathInfoMap[submoduleKey] = info;
    };
    if (Array.isArray(globs)) {
        globs.forEach((item, index) => extendSubmoduleInfo(`${BASE_SUBMODULE_DIR_NAME}_${index}`, item));
    }
    else if (typeof globs === 'object' && globs !== null) {
        if (typeof globs.component !== 'object' && typeof globs.doc !== 'string') {
            Object.entries(globs).forEach(([submoduleKey, item]) => extendSubmoduleInfo(submoduleKey, item));
        }
        else {
            extendSubmoduleInfo(BASE_SUBMODULE_DIR_NAME, globs);
        }
    }
    return {
        pathInfoMap,
        globsToWatch,
    };
}
exports.default = getSubmodulePath;
