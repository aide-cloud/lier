#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const axios_1 = __importDefault(require("axios"));
const open_1 = __importDefault(require("open"));
const commander_1 = __importDefault(require("commander"));
const chokidar_1 = __importDefault(require("chokidar"));
const webpack_1 = require("webpack");
const webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
const arco_cli_dev_utils_1 = require("arco-cli-dev-utils");
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const locale_1 = __importDefault(require("../locale"));
const getMainConfig_1 = __importStar(require("../utils/getMainConfig"));
const webpackCallback_1 = __importDefault(require("../utils/webpackCallback"));
const generateEntryFiles_1 = __importStar(require("../utils/generateEntryFiles"));
const webpack_config_1 = require("../config/webpack.config");
const getArcoHost_1 = __importDefault(require("../utils/getArcoHost"));
// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
    throw err;
});
const HTML_ENTRY_NAME = 'index.html';
const VALID_SUBCOMMANDS = ['build', 'dev'];
const URL_HTML_TEMPLATE_PREFIX = `http://${process.env.HTML_TEMPLATE_DOMAIN ||
    'lf-cdn-tos.bytescm.com/obj/static/arco-design/material/platform-dev'}/`;
const URL_HTML_TEMPLATE_ISOLATE = `${URL_HTML_TEMPLATE_PREFIX}team.isolate.html`;
const URL_HTML_TEMPLATE_DEVELOPMENT = `${URL_HTML_TEMPLATE_PREFIX}team.development.html`;
// Watch file changes, re-generate entry files
function hotUpdateEntries(globsToWatch) {
    const mainConfigPath = (0, getMainConfig_1.getMainConfigPath)();
    const watcher = chokidar_1.default.watch(globsToWatch.concat(mainConfigPath), {
        ignoreInitial: true,
    });
    watcher
        .on('add', (filePath) => {
        arco_cli_dev_utils_1.print.success(locale_1.default.TIP_REGENERATE_ENTRY_BY_GLOB);
        arco_cli_dev_utils_1.print.info(`[+] ${filePath}`);
        (0, generateEntryFiles_1.default)({ isDev: true });
    })
        .on('unlink', (filePath) => {
        arco_cli_dev_utils_1.print.success(locale_1.default.TIP_REGENERATE_ENTRY_BY_GLOB);
        arco_cli_dev_utils_1.print.info(`[-] ${filePath}`);
        (0, generateEntryFiles_1.default)({ isDev: true });
    })
        .on('change', () => {
        // TODO re-check why this not work
        // if (filePath === mainConfigPath) {
        //   print.success(locale.TIP_REGENERATE_ENTRY_BY_CONFIG);
        //   generateEntryFiles();
        // }
    });
    return () => __awaiter(this, void 0, void 0, function* () {
        yield watcher.close();
    });
}
commander_1.default
    .name('arco-doc-site')
    .usage('[commands] [options]')
    .arguments('<cmd>')
    .action((cmd) => {
    if (VALID_SUBCOMMANDS.indexOf(cmd) === -1) {
        arco_cli_dev_utils_1.print.error('[arco-doc-site]', 'Invalid command...');
        commander_1.default.help();
    }
});
commander_1.default
    .command('build')
    .description('build site for production')
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    yield (0, generateEntryFiles_1.default)();
    if ((_a = webpack_config_1.prod === null || webpack_config_1.prod === void 0 ? void 0 : webpack_config_1.prod.output) === null || _a === void 0 ? void 0 : _a.path) {
        fs_extra_1.default.removeSync(webpack_config_1.prod.output.path);
    }
    // Set isolate entry for webpack config
    try {
        const { site: { languages }, } = (0, getMainConfig_1.default)();
        const { data: htmlTemplate } = yield axios_1.default.get(URL_HTML_TEMPLATE_ISOLATE);
        webpack_config_1.prod.plugins.push(new html_webpack_plugin_1.default({
            templateContent: htmlTemplate,
            filename: HTML_ENTRY_NAME,
            // TODO handle multiple languages
            chunks: languages.slice(0, 1),
        }));
    }
    catch (error) {
        arco_cli_dev_utils_1.print.error('[arco-doc-site]', `Failed to get HTML template from ${URL_HTML_TEMPLATE_ISOLATE}`);
        console.error(error);
        return;
    }
    (0, webpack_1.webpack)(webpack_config_1.prod, webpackCallback_1.default);
}));
commander_1.default
    .command('dev')
    .description('dev mode')
    .option('-l, --language [language]', locale_1.default.TIP_DEV_OPTION_LANGUAGE)
    .action(({ language }) => __awaiter(void 0, void 0, void 0, function* () {
    const { group, site: { languages }, } = (0, getMainConfig_1.default)();
    const globsToWatch = yield (0, generateEntryFiles_1.default)();
    // Set default language
    language = language || languages[0];
    // Set dev entry for webpack config
    try {
        const { data: htmlTemplate } = yield axios_1.default.get(URL_HTML_TEMPLATE_DEVELOPMENT);
        webpack_config_1.dev.entry = {
            [language]: (0, generateEntryFiles_1.getPathEntryByLanguage)(language),
        };
        webpack_config_1.dev.plugins.push(new html_webpack_plugin_1.default({
            templateContent: htmlTemplate,
            filename: HTML_ENTRY_NAME,
            chunks: [language],
        }));
    }
    catch (error) {
        arco_cli_dev_utils_1.print.error('[arco-doc-site]', `Failed to get HTML template from ${URL_HTML_TEMPLATE_DEVELOPMENT}`);
        console.error(error);
        return;
    }
    // Extend dev server options
    const devSeverOptions = Object.assign({}, webpack_config_1.dev.devServer);
    const arcoHost = yield (0, getArcoHost_1.default)(group === null || group === void 0 ? void 0 : group.private);
    const proxy = {
        target: arcoHost,
        cookieDomainRewrite: `${devSeverOptions.host || 'localhost'}:${devSeverOptions.port}`,
        secure: false,
        changeOrigin: true,
    };
    const apiPath = '/material/api';
    devSeverOptions.proxy = devSeverOptions.proxy || {};
    if (Array.isArray(devSeverOptions.proxy)) {
        if (!devSeverOptions.proxy.find((item) => Array.isArray(item === null || item === void 0 ? void 0 : item.context) && item.context.indexOf(apiPath) > -1)) {
            devSeverOptions.proxy.push(Object.assign({ context: [apiPath] }, proxy));
        }
    }
    else if (!devSeverOptions.proxy[apiPath]) {
        devSeverOptions.proxy[apiPath] = proxy;
    }
    const compiler = (0, webpack_1.webpack)(webpack_config_1.dev);
    const server = new webpack_dev_server_1.default(devSeverOptions, compiler);
    yield server.start();
    // Watch file and re-generate entry files
    hotUpdateEntries(globsToWatch);
}));
commander_1.default
    .command('preview')
    .description('preview a doc site from local dist files')
    .option('--path [path]', locale_1.default.TIP_PREVIEW_PATH)
    .option('-p, --port [port]', locale_1.default.TIP_PREVIEW_PORT)
    .option('-l, --language [language]', locale_1.default.TIP_DEV_OPTION_LANGUAGE)
    .action(({ language, port = 9093, path: previewPath = '', }) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    const hostArco = ((_b = (0, arco_cli_dev_utils_1.getGlobalInfo)().host) === null || _b === void 0 ? void 0 : _b.arco) || 'https://arco.design';
    const query = `localPreviewUrl=http://localhost:${port}${previewPath}`;
    const openBrowser = (url) => {
        (0, open_1.default)(url);
        console.log(`Visit ${url}`);
    };
    (0, arco_cli_dev_utils_1.fileServer)(port);
    openBrowser(`${hostArco}/material/team/SitePreview${language ? `/${language}` : ''}?${query}`);
}));
commander_1.default.parse(process.argv);
