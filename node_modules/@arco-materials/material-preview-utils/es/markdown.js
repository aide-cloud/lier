var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import * as _ from 'lodash';
import loadable from '@loadable/component';
import parseImports from './parseImports';
import getMarkdownContentByTitle from './getMarkdownContentByTitle';
import { LIBRARY_GLOBAL_NAME_MAP, REGEXP_IMPORT_ARCO_REACT, REGEXP_IMPORT_ARCO_REACT_ICON, REGEXP_IMPORT_ARCO_VUE, REGEXP_IMPORT_ARCO_VUE_ICON, REGEXP_IMPORT_MATERIAL_DEMO_VENDOR, } from './constant';
// @ts-ignore
var loadableTypescript = loadable.lib(function () { return import('typescript/lib/typescriptServices'); });
var TS_COMPILER_OPTIONS = {
    jsx: 'preserve',
    module: 'esnext',
    target: 'es6',
    removeComments: false,
};
function parseCodeOptions(text) {
    if (text === void 0) { text = ''; }
    var query = _.get(text.match(/(`{3}|~{3})(.+)\n*/), 2);
    var parsedProps = {
        language: 'jsx',
    };
    if (query) {
        _.split(query, /\s+/)
            .map(function (str) { return str.split('='); })
            .forEach(function (map) {
            if (Array.isArray(map) && map.length) {
                var key = map[0];
                var value = map[1];
                if (map.length === 1) {
                    parsedProps.language = key;
                }
                else if (typeof value === 'string') {
                    try {
                        parsedProps[key] = JSON.parse(value);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
                else {
                    parsedProps[key] = value;
                }
            }
        });
    }
    return parsedProps;
}
function parseCodeComment(text) {
    if (text === void 0) { text = ''; }
    var result = {};
    var matches = text.match(/\/\*{2}\n([\w\W]*?)\*\//);
    text = (matches && matches[1]) || '';
    text.split(/\n\s*\*\s*(?=@)/).forEach(function (item) {
        var _a = __read(item.match(/\s*@(\w+)\s([\w\W]+)/) || [], 3), key = _a[1], value = _a[2];
        if (key && value) {
            var _value = value.split(/\n\s*\*\s*/).map(function (str) { return str.replace(/\n/g, ''); });
            if (_value.length) {
                result[key] = _value;
            }
        }
    });
    return result;
}
function transformImportToConstDeclaration(code, materialPackageName) {
    var unexpectImportList = [];
    var constRequireExpression = [];
    try {
        parseImports(code).forEach(function (_a) {
            var moduleName = _a.moduleName, starImport = _a.starImport, defaultImport = _a.defaultImport, namedImports = _a.namedImports, sideEffectOnly = _a.sideEffectOnly;
            if (!moduleName || sideEffectOnly) {
                return;
            }
            var libraryName = LIBRARY_GLOBAL_NAME_MAP[moduleName];
            if (!libraryName) {
                if (REGEXP_IMPORT_ARCO_REACT_ICON.test(moduleName) ||
                    REGEXP_IMPORT_ARCO_VUE_ICON.test(moduleName)) {
                    libraryName = LIBRARY_GLOBAL_NAME_MAP.arcoLibrary;
                }
                else {
                    var isImportingArcoLib_1 = false;
                    // 兼容 import Button from '@arco-design/web-react/es/Button'
                    var dirs = moduleName
                        .replace(REGEXP_IMPORT_ARCO_REACT, function () {
                        isImportingArcoLib_1 = true;
                        return '';
                    })
                        .replace(REGEXP_IMPORT_ARCO_VUE, function () {
                        isImportingArcoLib_1 = true;
                        return '';
                    });
                    if (isImportingArcoLib_1) {
                        if (!dirs || /^\/[^\/]+$/.test(dirs)) {
                            libraryName = "" + LIBRARY_GLOBAL_NAME_MAP.arcoLibrary + dirs.replace('/', '.');
                        }
                    }
                    else {
                        libraryName = REGEXP_IMPORT_MATERIAL_DEMO_VENDOR.test(moduleName)
                            ? LIBRARY_GLOBAL_NAME_MAP.arcoMaterialDemoVendor
                            : new RegExp(materialPackageName, 'i').test(moduleName)
                                ? LIBRARY_GLOBAL_NAME_MAP.arcoMaterial
                                : '';
                    }
                }
            }
            if (libraryName) {
                var globalRequireStr_1 = "window." + libraryName;
                if (starImport) {
                    constRequireExpression.push("const " + starImport + " = " + globalRequireStr_1 + ";");
                }
                if (defaultImport) {
                    constRequireExpression.push("const " + defaultImport + " = " + globalRequireStr_1 + ".default || " + globalRequireStr_1 + ";");
                }
                namedImports.forEach(function (_a) {
                    var name = _a.name, alias = _a.alias;
                    constRequireExpression.push("const " + alias + " = " + globalRequireStr_1 + "." + name + ";");
                });
            }
            else {
                unexpectImportList.push(moduleName);
            }
        });
        // 去除所有的 import 语句
        code = constRequireExpression.join('\n') + "\n" + code
            .replace(/import\s+\S+;/g, '')
            .replace(/import\s+.+\s+from\s+\S+;*/gs, '');
    }
    catch (error) { }
    return { code: code, unexpectImportList: unexpectImportList };
}
export function getCodeForRenderPackageDirectly(packageName) {
    return "import Demo from '" + packageName + "'; export default () => <Demo/>;";
}
export function extractCodeBlocks(text) {
    return __awaiter(this, void 0, void 0, function () {
        var typescript, _a, demoPart, docPart, regExp, blocks, codePositions_1, regCodePrefix, regDescriptionPrefix, demoDescriptions_1, i, raw, code, options, js, ts_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, loadableTypescript.load()];
                case 1:
                    typescript = (_b.sent()).default;
                    _a = getMarkdownContentByTitle(text, '## Demos'), demoPart = _a.content, docPart = _a.rest;
                    regExp = /~{3}(?!~)|`{3}(?!`)/g;
                    blocks = [];
                    if (regExp.test(demoPart)) {
                        codePositions_1 = [];
                        demoPart.replace(regExp, function (match, p1) {
                            codePositions_1.push(p1);
                            return match;
                        });
                        regCodePrefix = /(`{3}|~{3})([jt]sx|vue)\n+/i;
                        regDescriptionPrefix = /(`{3}|~{3})json\s+type=description\n+/i;
                        demoDescriptions_1 = [];
                        for (i = 0; i < codePositions_1.length; i += 2) {
                            raw = demoPart.slice(codePositions_1[i], codePositions_1[i + 1] + 3);
                            code = raw.replace(/(`{3}|~{3}).*\n*/g, '');
                            if (regDescriptionPrefix.test(raw)) {
                                try {
                                    demoDescriptions_1 = JSON.parse(code)
                                        .filter(function (_a) {
                                        var kind = _a.kind;
                                        return kind === 'member';
                                    })
                                        .map(function (des) {
                                        // 根据换行符拆分为字符串数组
                                        Object.entries(des).forEach(function (_a) {
                                            var _b = __read(_a, 2), key = _b[0], value = _b[1];
                                            des[key] = (typeof value === 'string' ? value : '').split('\n');
                                        });
                                        return des;
                                    });
                                }
                                catch (e) { }
                            }
                            else if (regCodePrefix.test(raw)) {
                                options = parseCodeOptions(raw);
                                js = code;
                                ts_1 = '';
                                if (options.language === 'tsx') {
                                    ts_1 = code;
                                    js = typescript.transpile(code, TS_COMPILER_OPTIONS);
                                }
                                blocks.push({
                                    js: js,
                                    ts: ts_1,
                                    options: options,
                                    comment: parseCodeComment(code),
                                });
                            }
                        }
                        blocks.forEach(function (item, index) {
                            item.comment = __assign(__assign({}, demoDescriptions_1[index]), item.comment);
                        });
                    }
                    return [2 /*return*/, [blocks, docPart]];
            }
        });
    });
}
export function generateLiveCodeReact(rawCode, materialPackageName) {
    // 将 import 语句转为 const x = window.x;
    var _a = transformImportToConstDeclaration(rawCode, materialPackageName), _code = _a.code, unexpectImportList = _a.unexpectImportList;
    var code = _code;
    var defaultExport = 'ArcoLiveDemo';
    if (code.match(/ReactDOM\.render/)) {
        // 采用 Markdown 写法的 Demo
        code = code.replace(/ReactDOM\.render\(([\w\W]+\/[a-z|A-Z]*>),[\w\W]+\);*/, function (_, $1) { return "const " + defaultExport + " = () => " + $1 + ";"; });
    }
    else {
        // 采用 jsx 写法的 Demo
        code = code
            .replace(/\s*export\s+default\s+(.*)/g, function (_, $1) {
            // export default () => {}
            // export default function() {}
            if ($1.startsWith('(') || $1.startsWith('function')) {
                return "\nconst " + defaultExport + " = " + $1;
            }
            // export default Variable;
            defaultExport = $1.replace(/;\s*$/, '');
            return '';
        })
            .replace(/\s*export\s+/g, '');
    }
    code = "() => {\n    " + code + "\n    return <" + defaultExport + " />;\n  }";
    return {
        code: code,
        unexpectImportList: unexpectImportList,
    };
}
export function generateLiveCodeVue(rawCode, materialPackageName) {
    var unexpectImportList = [];
    var code = rawCode.replace(/<script[^>]*>(.+)<\/script>/gs, function (_, script) {
        var _a = transformImportToConstDeclaration(script, materialPackageName), _script = _a.code, _unexpectImportList = _a.unexpectImportList;
        unexpectImportList = _unexpectImportList;
        return "<script>" + _script + "</script>";
    });
    return { code: code, unexpectImportList: unexpectImportList };
}
