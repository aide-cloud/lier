var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import axios from 'axios';
import { ARCO_REACT_PACKAGE_NAME, ARCO_REACT_FILENAME_JS, ARCO_REACT_FILENAME_CSS, ARCO_REACT_FILENAME_ICON, MATERIAL_FILENAME_CSS, MATERIAL_FILENAME_JS, MATERIAL_FILENAME_VENDOR, ARCO_VUE_PACKAGE_NAME, ARCO_VUE_FILENAME_JS, ARCO_VUE_FILENAME_ICON, ARCO_VUE_FILENAME_CSS, ARCO_VERSION_NONE, } from './constant';
import { extractCodeBlocks } from './markdown';
// 从本地获取物料的代码和文档，进行预览
var query = new URLSearchParams(window.location.search);
var localPreviewUrl = query.get('localPreviewUrl');
var unpkgUrl = 'unpkg.com';
/**
 * 设置 UNPKG 的域名
 */
export function setUnpkgHost(url) {
    if (url && url !== unpkgUrl) {
        unpkgUrl = url.replace(/https?:\/\//, '');
    }
}
/**
 * 获取文件的 UNPKG 路径
 */
export function getUnpkgUrl(_a) {
    var packageName = _a.packageName, path = _a.path, version = _a.version, allowFetchFromLocal = _a.allowFetchFromLocal;
    version = version || 'latest';
    path = path.startsWith('/') ? path : "/" + path;
    if (allowFetchFromLocal && localPreviewUrl) {
        return "" + localPreviewUrl + path;
    }
    return "//" + unpkgUrl + "/" + packageName + "@" + version + path;
}
/**
 * 获取 Arco React 的文件路径
 */
export var getArcoReactFileUrl = function (fileType, version) {
    if (version === ARCO_VERSION_NONE) {
        return null;
    }
    var key = version && version.startsWith('1') ? 'v1' : 'v2';
    var packageName = ARCO_REACT_PACKAGE_NAME[key];
    var fileName = fileType === 'js'
        ? ARCO_REACT_FILENAME_JS[key]
        : fileType === 'icon'
            ? ARCO_REACT_FILENAME_ICON[key]
            : "css/" + ARCO_REACT_FILENAME_CSS[key];
    return getUnpkgUrl({ packageName: packageName, path: "/dist/" + fileName, version: version });
};
/**
 * 获取 Arco Vue 的文件路径
 */
export var getArcoVueFileUrl = function (fileType, version) {
    var fileName = fileType === 'js'
        ? ARCO_VUE_FILENAME_JS
        : fileType === 'icon'
            ? ARCO_VUE_FILENAME_ICON
            : ARCO_VUE_FILENAME_CSS;
    return getUnpkgUrl({ packageName: ARCO_VUE_PACKAGE_NAME, path: "/dist/" + fileName, version: version });
};
/**
 * 获取 Arco 主题的样式文件路径
 */
export var getArcoThemeFileUrl = function (theme, version) {
    return getUnpkgUrl({ packageName: theme, path: "/css/arco.css", version: version || 'latest' });
};
/**
 * 获取物料的包信息
 */
export var getPackageInfo = function (packageName, version) {
    if (version === void 0) { version = 'latest'; }
    return __awaiter(void 0, void 0, void 0, function () {
        var data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios.get(getUnpkgUrl({ packageName: packageName, path: '/package.json', version: version, allowFetchFromLocal: true }))];
                case 1:
                    data = (_a.sent()).data;
                    return [2 /*return*/, data];
            }
        });
    });
};
/**
 * 获取物料的文件路径
 */
export var getMaterialFileUrl = function (packageName, version, fileType) {
    var fileName = fileType === 'js'
        ? MATERIAL_FILENAME_JS
        : fileType === 'vendor'
            ? MATERIAL_FILENAME_VENDOR
            : "css/" + MATERIAL_FILENAME_CSS;
    return getUnpkgUrl({
        packageName: packageName,
        version: version,
        path: "/dist/" + fileName,
        allowFetchFromLocal: true,
    });
};
/**
 * 获取物料的使用文档
 */
export function getMaterialUsageDoc(_a) {
    var packageName = _a.packageName, version = _a.version;
    return __awaiter(this, void 0, void 0, function () {
        var usageDoc, data, err_1, _b, demoCodes, apiUsage;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    usageDoc = '';
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios.get(getUnpkgUrl({ packageName: packageName, path: '/docs/README.md', version: version, allowFetchFromLocal: true }))];
                case 2:
                    data = (_c.sent()).data;
                    usageDoc = data;
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _c.sent();
                    return [3 /*break*/, 4];
                case 4: return [4 /*yield*/, extractCodeBlocks(usageDoc)];
                case 5:
                    _b = __read.apply(void 0, [_c.sent(), 2]), demoCodes = _b[0], apiUsage = _b[1];
                    return [2 /*return*/, { demoCodes: demoCodes, apiUsage: apiUsage }];
            }
        });
    });
}
/**
 * 预览本地物料时，获得本地物料的元信息
 */
export function getMaterialInfoFromUnpkg() {
    return __awaiter(this, void 0, void 0, function () {
        var meta;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios.get(getUnpkgUrl({ packageName: '', path: '/arcoMeta.json', allowFetchFromLocal: true }))];
                case 1:
                    meta = (_a.sent()).data;
                    if (meta) {
                        return [2 /*return*/, __assign(__assign({}, meta), { packageInfo: meta.package, members: [], status: {
                                    level: 1,
                                } })];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
