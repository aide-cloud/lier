import split from 'mdast-util-split-by-heading';
import toMarkdown from 'mdast-util-to-markdown';
import fromMarkdown from 'mdast-util-from-markdown';
export default function getMarkdownContentByTitle(markdown, title) {
    var result = {
        content: '',
        rest: markdown,
    };
    var titleText;
    var titleLevel;
    var targetTitleOffsetIndex;
    title.replace(/^(#+)\s(.+)$/, function (_, $1, $2) {
        titleText = $2;
        titleLevel = $1.length;
        return _;
    });
    if (titleText && titleLevel) {
        var titleOffsetList = split(fromMarkdown(markdown), { splitDepth: titleLevel }).trees.map(function (_a, index) {
            var _b;
            var title = _a.title, children = _a.children;
            if (((_b = title.children.children[0]) === null || _b === void 0 ? void 0 : _b.value.trim()) === titleText) {
                result.content = toMarkdown(children);
                targetTitleOffsetIndex = index;
            }
            return title.children.position.start.offset;
        });
        var startIndex = titleOffsetList[targetTitleOffsetIndex];
        var endIndex = titleOffsetList[targetTitleOffsetIndex + 1];
        if (startIndex !== undefined) {
            result.rest = markdown.replace(markdown.substr(startIndex, endIndex ? endIndex - startIndex : undefined), '');
        }
    }
    return result;
}
