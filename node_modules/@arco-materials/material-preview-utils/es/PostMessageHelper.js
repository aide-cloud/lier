var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { MESSAGE_KEY } from './constant';
var PostMessageHelper = /** @class */ (function () {
    function PostMessageHelper(_a) {
        var _this = this;
        var targetWindow = _a.targetWindow, _b = _a.targetOrigin, targetOrigin = _b === void 0 ? '*' : _b, onMessage = _a.onMessage, _c = _a.key, key = _c === void 0 ? MESSAGE_KEY : _c;
        this.key = key;
        this.targetWindow = targetWindow;
        this.targetOrigin = targetOrigin;
        this.onMessageHandler = function (event) {
            var source = event.source, data = event.data;
            if (onMessage && source === _this.targetWindow && (data === null || data === void 0 ? void 0 : data.key) === _this.key) {
                onMessage({
                    type: data.type,
                    content: data.content,
                }, event);
            }
        };
        window.addEventListener('message', this.onMessageHandler, false);
    }
    PostMessageHelper.prototype.postMessage = function (message) {
        this.targetWindow.postMessage(__assign({ key: this.key }, message), this.targetOrigin);
    };
    PostMessageHelper.prototype.destroy = function () {
        window.removeEventListener('message', this.onMessageHandler);
    };
    return PostMessageHelper;
}());
export default PostMessageHelper;
